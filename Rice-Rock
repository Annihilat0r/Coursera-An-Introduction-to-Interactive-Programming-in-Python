'''
TO DO:
3. Correct nebula fo 8+ LEVELS
'''


# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
SCORE = 0
LIVES = 10
time = 0.5
rotate_speed = 0.03
speed = 10 / 100.0
friction = 0.97
missile_live = 100
frequency = 20
LEVEL = 1
difficult = (LEVEL)*2
start_shooting = 0
explosion_list_pos = [900,500]
explosion_index = -1
play = False
pause = True
a = 0
money = 300000
update_speed_cost = 100
update_frequency_cost = 100
update_missile_live_cost = 100
rocks = 0
upd_freq = 0
upd_speed = 0
upd_miss = 0
money_earn = 0
money_multiply = 1
acc = 0.97
missile_speed = 1
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)
x_time = 0
x_time_division = 100

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim

debris_info = ImageInfo([320, 240], [640, 480])
debris_image_dict = {0:'',
                     1:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris1_blue.png",
                     2:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png",
                     3:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris3_blue.png",
                     4:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris4_blue.png",
                     5:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris1_brown.png",
                     6:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_brown.png",
                     7:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris3_brown.png",
                     8:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris4_brown.png",
                     9:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris_blend.png",}
debris_image = simplegui.load_image(debris_image_dict[1])

nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")
nebula_image2 = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_brown.png")

splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, missile_live)
missile_image_dict = {1:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot1.png",
                      2:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png",
                      3:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot3.png"}

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image_dict = {1:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png",
                       2:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_brown.png",
                       3:"http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blend.png"}
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image_dict = {0 : "http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png",
                        1 : "http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_orange.png",
                        2 : "http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_blue.png",
                        3 : "http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_blue2.png",
                        }
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

#animated explosion ship
explosion_image_ship_info = ImageInfo([50, 50], [100, 100], 17, 9, True)
explosion_image_ship = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/explosion.hasgraphics.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack_old = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/Epoq-Lepidoptera.ogg")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
ship_thrust_sound.set_volume(.5)
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

upgrade_img = simplegui.load_image("http://s2.postimg.org/pgkrawbxl/789.png")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.shoot = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
    
        #[freq, missile_living, missile_speedy, rotate_speedy, speedy, acc]
    def draw(self,canvas):
        global a, play, pause
        
        if self.thrust and not pause:
            self.image_center[0] = self.image_size[0] / 2 + ship_info.size[0]
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.rewind()
            self.image_center[0] = self.image_size[0] / 2
            
        #canvas.draw_circle(self.pos, 150, 1, "White", "White")
        
        if LIVES < 1:
            pause = True
            self.image = explosion_image_ship
            self.image_center = [50,50]
            a += 1
            explosion_index_ship = [a % 9//1, (a // 9) % 9]
            self.image_center[0] = 50 + explosion_index_ship[0] * 100 
            self.image_center[1] = 50 + explosion_index_ship[1] * 100 
        canvas.draw_image(self.image, self.image_center, self.image_size , self.pos, self.image_size, self.angle)
        if a == 80:
            ship_thrust_sound.rewind()
            play = False
            soundtrack.rewind()
            
        
    def update(self):
        self.lifetime = missile_living.val
        self.freq = freq.val
        self.missile_speed = missile_speedy.val
        self.rotate = rotate_speedy.val 
        self.speed = speedy.val
        self.acc = acc.val
        
        if not pause:
            self.ang = angle_to_vector(self.angle)
            if my_ship.thrust:
                self.vel[0] += self.ang[0]*(speedy.val+self.acc)
                self.vel[1] += self.ang[1]*(speedy.val+self.acc)

            self.pos[0] += self.vel[0]
            self.pos[1] += self.vel[1]
            self.vel[0] *= friction
            self.vel[1] *= friction
            self.pos[0] = self.pos[0] % WIDTH 
            self.pos[1] = self.pos[1] % HEIGHT 
            self.angle  += self.angle_vel
            speed_draw = abs(round(self.vel[0],1))+abs(round(self.vel[1],1))
            if self.shoot:
                self.shooting()

    def shooting(self):
        global a_missile, start_shooting
        start_shooting += 1
         
        if (self.lifetime*self.missile_speed) < 200:
            missile_view = 2
        elif (self.lifetime*self.missile_speed) < 500:
            missile_view = 1
        else:
            missile_view = 3
            missile_info.size[0] = 20
            missile_info.size[1] = 20
            missile_info.center[1] = 10
            missile_info.center[0] = 10
            
        self.missile_image = simplegui.load_image(missile_image_dict[missile_view])
        if (start_shooting % (self.freq + 1)) == 0 and not pause:
            a_missile.add(Sprite([self.pos[0] + (self.image_size[0]/2-10)*self.ang[0],
                            self.pos[1] + (self.image_center[1]-10)*self.ang[1]],
                           [self.vel[0]+self.missile_speed*self.ang[0], 
                            self.vel[1]+self.missile_speed*self.ang[1]],
                            self.angle, 0, self.missile_image, missile_info, missile_sound))
       
    def group_collide(self, other_group):
        global explosion_list_pos, explosion_index, LIVES, a, money_earn
        collide = False
        for object in list(other_group):
            if (abs(self.pos[0] - object.pos[0]) < self.radius+object.radius - 20) and (abs(self.pos[1] - object.pos[1]) < self.radius+object.radius - 20): 
                other_group.remove(object)
                explosion_list_pos = object.pos
                explosion_index = -1
                LIVES -= 1
                explosion_sound.play()
                money_earn = 0
        
              

# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = my_ship.lifetime
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
        
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size , self.pos, self.image_size, self.angle)
    
    def update(self):
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        self.pos[0] = self.pos[0] % WIDTH 
        self.pos[1] = self.pos[1] % HEIGHT 
        self.angle  += self.angle_vel
        self.lifespan -= 1
        
    def group_collide(self, other_group):
        global explosion_list_pos, explosion_index, SCORE, LEVEL, money, money_earn, money_multiply
        collide = False
        money_multiply = money_mult.val
        for object in list(other_group):
            if (abs(self.pos[0] - object.pos[0]) < self.radius+object.radius) and (abs(self.pos[1] - object.pos[1]) < self.radius+object.radius): 
                collide = True
                explosion_list_pos = object.pos
                other_group.remove(object)
                explosion_index = -1
                SCORE += 10
                money_earn = (10 + 20*difficult)*money_multiply
                money += money_earn
                explosion_sound.play()
        return collide

    



           
def draw(canvas):
    global time, explosion_list_pos, explosion_index, debris_image, splash_image, nebula_image, explosion_image
    
    if play:
        
        wtime = (time / 4) % WIDTH
        center = debris_info.get_center()
        size = debris_info.get_size()
        canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
        canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
        canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

        #UPGRADE LABELS, BUTTONS
        try:
            speed_label.set_text('Speed: '+str(int(my_ship.speed*100)))
            frequency_label.set_text('Frequency: '+str(100.0/my_ship.frequency))
            missile_live_label.set_text('Missile live: '+str(int(my_ship.missile_living)))
        except:pass
        if pause: 
            debris_image = simplegui.load_image(debris_image_dict[int(LEVEL%10)])
            explosion_image = simplegui.load_image(explosion_image_dict[int(LEVEL%4)])
            if LEVEL > 4:
                    nebula_image = nebula_image2
        else: time += 1
        
        # draw ship and sprites
        my_ship.pos[0] = my_ship.pos[0] % 800 
        my_ship.pos[1] = my_ship.pos[1] % 600 
        my_ship.draw(canvas)

        explosion_index = (explosion_index +1)%25//1
        if explosion_index == 24: explosion_list_pos = [900,500]
        expl_pos=[explosion_info.get_center()[0] + explosion_index * explosion_info.get_size()[0], 
                             explosion_info.get_center()[1]]    
        canvas.draw_image(explosion_image, expl_pos, explosion_info.get_size(), explosion_list_pos, explosion_info.get_size())  
        canvas.draw_text('$'+str(money_earn), (explosion_list_pos[0]-20,explosion_list_pos[1]+5), 20, 'Yellow')
        
        for rock in g_rock:
            rock.draw(canvas)

        for missile in list(a_missile):
            missile.draw(canvas)

        canvas.draw_text('Lives: ' + str(LIVES), [10,30], 30, 'White')
        canvas.draw_text('Score: ' + str(SCORE), [WIDTH - 160,30], 30, 'White')
        canvas.draw_text('LVL: ' + str(int(LEVEL)) +' Difficult: ' + str(difficult), [WIDTH/2 - 130,30], 30, 'White')
        canvas.draw_text('Rocks: ' + str(rocks) +'/'+ str(10 + LEVEL *2), [WIDTH - 150,HEIGHT - 10], 30, 'White')

    
    if pause:
        if not play:
            canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
        else:
        
            canvas.draw_image(upgrade_img, [400,300], [800,600], [400,300],[800,600])
            canvas.draw_text('Level: ' + str(int(LEVEL)), [WIDTH - 250,100], 30, 'White')
            canvas.draw_text('- For start click any key', [WIDTH - 320,150], 30, 'White')
            canvas.draw_text('- Shooting: Space', [WIDTH - 320,190], 30, 'White')
            canvas.draw_text('- Pause: Esc', [WIDTH - 320,230], 30, 'White')
            canvas.draw_text('- Upgrade your ship!', [WIDTH - 320,270], 30, 'White')
            canvas.draw_text('$' +str(money), [190,HEIGHT - 87], 24, 'White')
            for n in upgrade_list:
                n.draw(canvas)
        
def timer_update():
    global a_rock, rocks, LEVEL, pause, difficult, x_time
    if not pause:
        x_time += 1
        print x_time_division
        if x_time % x_time_division == 0:
            new_rock_pos = [random.randrange(0,WIDTH), random.randrange(0,HEIGHT)]
            if (abs(new_rock_pos[0] - my_ship.pos[0]) < my_ship.radius+50) and (abs(new_rock_pos[1] - my_ship.pos[1]) < my_ship.radius+50):
                new_rock_pos[0] += 150   
                new_rock_pos[1] += 150
            if (rocks < (10 + LEVEL *2)):
                g_rock.add(Sprite(new_rock_pos, [(random.random()-0.5)*difficult, (random.random()-0.5)*difficult], random.random() * difficult , (random.random()-.5)*0.03*difficult, asteroid_image, asteroid_info))
                rocks += 1
            elif g_rock ==set([]): 
                LEVEL += 1
                difficult = LEVEL * 2
                rocks = 0
                pause = True

        my_ship.update()
        my_ship.group_collide(g_rock)

        for rock in g_rock:
            rock.update()

        for missile in list(a_missile):
            missile.update()
            if missile.lifespan == 0:
                try: 
                    a_missile.remove(missile)
                except:
                    pass
            if missile.group_collide(g_rock):
                try: 
                    a_missile.remove(missile)
                except:
                    pass
    
###############################CLICKER###################    
def click(pos):
    global pause, x_time_division
    if (not play):
        new_game()
    if pause:
        i = 0
        for n in upgrade_list:
            if abs(n.pos[1] - pos[1]) < 15 and abs(n.pos[0] - pos[0]) < 15:
                n.buy()
            else: 
                i += 1
        if i == 7:
            pause = False
        timer.stop()
        if LEVEL < 10: 
            x_time_division = 100 - 7*LEVEL
        timer.start()
    else : pause = True

def keydown_handler(key):
    global my_ship, start_shooting
    if play:
        if key == simplegui.KEY_MAP['space']:
            start_shooting = my_ship.freq -1
            my_ship.shoot = True  
        if key == simplegui.KEY_MAP['up']:
            my_ship.thrust = True
        if key == simplegui.KEY_MAP['left']:
            my_ship.angle_vel = -my_ship.rotate
        if key == simplegui.KEY_MAP['right']:
            my_ship.angle_vel = my_ship.rotate
        
    
def keyup_handler(key):
    global my_ship, pause
    if play:
        if key == simplegui.KEY_MAP['space']:
            my_ship.shoot = False 
        if key == simplegui.KEY_MAP['up']:
            my_ship.thrust = False
        if key == simplegui.KEY_MAP['left'] or key == simplegui.KEY_MAP['right']:
            my_ship.angle_vel = 0
        if key == 27:
            if not pause:
                pause = True
            else: 
                pause = False
    if pause and key != 27:
        click([400,200])
        
def new_game():
    global play, g_rock, a_missile, my_ship, LIVES, a, LEVEL, SCORE
    SCORE = 0
    a = 0
    play = True
    LEVEL = 1
    my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
    my_ship.image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")
    my_ship.image_center = ship_info.get_center()
    g_rock = set ([])
    a_missile = set([])
    LIVES = 10
    timer.start()
    ######soundtrack.play()
    debris_image = simplegui.load_image(debris_image_dict[1])
    
# UPGRADE SHIP
class Upgrade:
    def __init__(self, name, val, upd_val, upd_cost, pos, str_conf):
        self.val = val
        self.upd_val = upd_val
        self.upd_cost = upd_cost
        self.rang = 1
        self.name = name
        self.text = 'Upgrade to %s (%s) for $%s' % (self.name, self.rang+1, self.upd_cost)
        self.pos = pos
        self.str_conf = str_conf
        self.money_enough = True
        
    def buy(self):
        global money
        if money >= self.upd_cost:
            self.val += self.upd_val 
            self.rang += 1
            money -= self.upd_cost
            self.upd_cost += 2*self.upd_cost
            self.text = 'Upgrade to %s (%s) for $%s' % (self.name, self.rang+1, self.upd_cost)
        else:
            self.money_enough = False

    def draw(self, canvas):
        self.text_val = self.val*self.str_conf
        if self.name != 'Money multiply':
            self.text_val =int(self.text_val)
        canvas.draw_text(str(self.text_val), (self.pos[0] - 50, self.pos[1]+8), 25, 'White')
        canvas.draw_text('$'+str(self.upd_cost), (self.pos[0] + 20, self.pos[1]+8), 25, 'White')
        if not self.money_enough:
            canvas.draw_text('Not enough money for %s!'%(self.name), (100,300), 25, 'Red')

speedy = Upgrade('Speed', speed, 0.05, 150, [190,392], 100)   
freq = Upgrade('Frequency', frequency, -3, 200, [190,138], 1)
missile_living = Upgrade('Missile live', missile_live, 10, 300, [190,104], 0.1)
rotate_speedy = Upgrade('Rotate_speed', rotate_speed, 0.01, 200, [190,359], 100)
missile_speedy = Upgrade('Missile_speed', missile_speed, 0.5, 120, [190,172], 1)
acc = Upgrade('Acceleration', 0.01, 0.02, 200, [190,424], 100)
money_mult = Upgrade('Money multiply', money_multiply, 0.2, 50, [244,530], 1)
upgrade_list = [freq, missile_living, missile_speedy, rotate_speedy, speedy, acc, money_mult]



# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown_handler)
frame.set_keyup_handler(keyup_handler)
timer = simplegui.create_timer(20, timer_update)
frame.set_mouseclick_handler(click)

# get things rolling

frame.start()
