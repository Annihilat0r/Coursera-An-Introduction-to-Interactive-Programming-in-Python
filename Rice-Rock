# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
rotate_speed = 0.08
speed = 20 / 100.0
friction = 0.97
difficult = 3
start_shooting = 0
frequency = 10
explosion_list_pos = [900,500]
explosion_index = -1

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris1_brown.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 150)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.shoot = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.frequency = frequency
        
    def draw(self,canvas):
        if self.thrust:
            self.image_center[0] = self.image_size[0] / 2 + ship_info.size[0]
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.rewind()
            self.image_center[0] = self.image_size[0] / 2
            
        canvas.draw_image(self.image, self.image_center, self.image_size , self.pos, self.image_size, self.angle)
        

    def update(self):
        self.ang = angle_to_vector(self.angle)
        if my_ship.thrust:
            self.vel[0] += self.ang[0]*speed
            self.vel[1] += self.ang[1]*speed
              
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        self.vel[0] *= friction
        self.vel[1] *= friction
        self.pos[0] = self.pos[0] % WIDTH 
        self.pos[1] = self.pos[1] % HEIGHT 
        self.angle  += self.angle_vel
        if self.shoot:
            self.shooting()
        


        
    def shooting(self):
        global a_missile, start_shooting
        start_shooting += 1
        if (start_shooting % self.frequency) == 0:
            a_missile.add(Sprite([self.pos[0] + (self.image_size[0]/2-10)*self.ang[0],
                            self.pos[1] + (self.image_center[1]-10)*self.ang[1]],
                           [self.vel[0]*self.ang[0]+5*self.ang[0], 
                            self.vel[1]*self.ang[1]+5*self.ang[1]],
                            0, 0, missile_image, missile_info, missile_sound))
       
    def group_collide(self, other_group):
        collide = False
        for object in list(other_group):
            if (abs(self.pos[0] - object.pos[0]) < self.radius+object.radius) and (abs(self.pos[1] - object.pos[1]) < self.radius+object.radius): 
                print 'Collide!'
                other_group.remove(object)
                
                

# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
        
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size , self.pos, self.image_size, self.angle)
    
    def update(self):
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        self.pos[0] = self.pos[0] % WIDTH 
        self.pos[1] = self.pos[1] % HEIGHT 
        self.angle  += self.angle_vel
        self.lifespan -= 1
        
    def group_collide(self, other_group):
        global explosion_list_pos, explosion_index
        collide = False
        for object in list(other_group):
            if (abs(self.pos[0] - object.pos[0]) < self.radius+object.radius) and (abs(self.pos[1] - object.pos[1]) < self.radius+object.radius): 
                collide = True
                explosion_list_pos = object.pos
                other_group.remove(object)
                explosion_index = -1
                
       
        return collide


    
    
def keydown_handler(key):
    global my_ship
    if key == simplegui.KEY_MAP['space']:
        my_ship.shoot = True  
    if key == simplegui.KEY_MAP['up']:
        my_ship.thrust = True
    if key == simplegui.KEY_MAP['left']:
        my_ship.angle_vel = -rotate_speed
    if key == simplegui.KEY_MAP['right']:
        my_ship.angle_vel = rotate_speed
    
    
def keyup_handler(key):
    global my_ship, start_shooting
    if key == simplegui.KEY_MAP['space']:
        start_shooting = frequency -1
        my_ship.shoot = False 
    if key == simplegui.KEY_MAP['up']:
        my_ship.thrust = False
    if key == simplegui.KEY_MAP['left'] or key == simplegui.KEY_MAP['right']:
        my_ship.angle_vel = 0


           
def draw(canvas):
    global time, explosion_list_pos, explosion_index
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    my_ship.pos[0] = my_ship.pos[0] % 800 
    my_ship.pos[1] = my_ship.pos[1] % 600 
    my_ship.draw(canvas)

    
    explosion_index = (explosion_index +1)%25//1
    if explosion_index == 24: explosion_list_pos = [900,500]
    canvas.draw_image(explosion_image, 
                        [explosion_info.get_center()[0] + explosion_index * explosion_info.get_size()[0], 
                         explosion_info.get_center()[1]], 
                         explosion_info.get_size(), explosion_list_pos, explosion_info.get_size())    
    
    for rock in g_rock:
        rock.draw(canvas)
        rock.update()
       
        
    for missile in list(a_missile):
        missile.draw(canvas)
        missile.update()
        if missile.lifespan == 0:
            try: 
                a_missile.remove(missile)
            except:
                pass
        if missile.group_collide(g_rock):
            a_missile.remove(missile)
               
    
    my_ship.update()
    my_ship.group_collide(g_rock)
    
    
    canvas.draw_text('Lives: 3', [30,30], 30, 'White')
    canvas.draw_text('Score: 0', [WIDTH - 130,30], 30, 'White')
            
# timer handler that spawns a rock    
def rock_spawner():
    global a_rock
    g_rock.add(Sprite([random.randrange(0,WIDTH), random.randrange(0,HEIGHT)], [(random.random()-0.5)*difficult, (random.random()-0.5)*difficult], random.random(), random.random()*0.1, asteroid_image, asteroid_info))


    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
g_rock = set ([Sprite([random.randrange(0,WIDTH), random.randrange(0,HEIGHT)], [(random.random()-0.5)*difficult, (random.random()-0.5)*difficult], random.random(), random.random()*0.1, asteroid_image, asteroid_info)])
a_missile = set([Sprite([random.randrange(0,WIDTH), random.randrange(0,HEIGHT)], [(random.random()-0.5)*difficult, (random.random()-0.5)*difficult], random.random(), random.random()*0.1, missile_image, missile_info, missile_sound)])

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown_handler)
frame.set_keyup_handler(keyup_handler)
timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
